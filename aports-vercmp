#!/usr/bin/lua5.2

DEBUG = false
for i = #arg, 1, -1 do
	if arg[i] == "-d" then
		DEBUG = true
	end
end

function dbg(msg)
	if DEBUG then
		io.stderr:write("DEBUG: "..msg.."\n")
	end
end

upstream_providers = {
	(require("upstream.gnome")),
	(require("upstream.github")),
	(require("upstream.archlinux")),
}

maintainer = {}

aportsdir = os.getenv("APORTSDIR")
if aportsdir == nil then
	io.stderr:write("$APORTSDIR not set\n")
	os.exit(1)
end
dbg("init: aports: reading main")
db = require("aports.db").new(aportsdir, "main")

for p in db:each_aport() do
	local upstream_pkg = nil
	local newver = nil
	for _,provider in pairs(upstream_providers) do
		upstream_pkg = provider.init(p)
		if upstream_pkg then
			newver = upstream_pkg:find_newer()
			break
		end
	end
	if newver ~= nil then
		local m = p:get_maintainer()
		local t = {
			["name"] = p.pkgname,
			["current"] = p.pkgver,
			["new"] = newver,
			["upstream"] = upstream_pkg.provider_name,
		}
		if maintainer[m] == nil then
			maintainer[m] = {}
		end
		table.insert(maintainer[m], t)
	end
end

print(os.date())
for m, pkgs in pairs(maintainer) do
	if m == nil or m == "" then
		m = "(unmaintained)"
	end
	table.sort(pkgs, function(a,b) return a.name<b.name end)
	print("==== "..m.." ====")
	for i,p in pairs(pkgs) do
		print(string.format("%-40s(current: %s) %s",
				    p.name.."-"..p.new, p.current, p.upstream))
	end
	print()
end
