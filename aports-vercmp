#!/usr/bin/lua5.2

function dbg(msg)
	if DEBUG then
		io.stderr:write("DEBUG: "..msg.."\n")
	end
end

local function aports_db(section)
	aportsdir = os.getenv("APORTSDIR")
	if aportsdir == nil then
		io.stderr:write("$APORTSDIR not set\n")
		os.exit(1)
	end

	dbg("init: aports: reading "..section)
	return require("aports.db").new(aportsdir, section)
end

local function check(db, limit)
	local upstream_providers = {
		(require("upstream.gnome")),
		(require("upstream.github")),
		(require("upstream.generic")),
		(require("upstream.archlinux")),
	}

	local maintainers = {}
	local i = 1
	for p in db:each_aport() do
		i = i + 1
		if limit ~= 0 and i >= limit then
			break
		end

		local upstream_pkg = nil
		local newver = nil
		for _,provider in pairs(upstream_providers) do
			upstream_pkg = provider.init(p)
			if upstream_pkg then
				newver = upstream_pkg:find_newer()
				break
			end
		end
		if newver ~= nil then
			local m = p:get_maintainer()
			local t = {
				["name"] = p.pkgname,
				["current"] = p.pkgver,
				["new"] = newver,
				["upstream"] = upstream_pkg.provider_name,
			}
			if maintainers[m] == nil then
				maintainers[m] = {}
			end
			table.insert(maintainers[m], t)
		end
	end
	return maintainers
end

local function output(maintainers)
	print(os.date())
	for m, pkgs in pairs(maintainers) do
		if m == nil or m == "" then
			m = "(unmaintained)"
		end
		table.sort(pkgs, function(a,b) return a.name<b.name end)
		print("==== "..m.." ====")
		for i,p in pairs(pkgs) do
			print(string.format("%-40s(current: %s) %s",
						p.name.."-"..p.new, p.current, p.upstream))
		end
		print()
	end
end

DEBUG = false
LIMIT = 0
do
	local i = 1
	while i <= #arg do
		if arg[i] == "-d" then
			DEBUG = true
		elseif arg[i] == "-l" then
			i = i + 1
			LIMIT = tonumber(arg[i])
		end

		i = i + 1
	end
end

output(check(aports_db("main"), LIMIT))
